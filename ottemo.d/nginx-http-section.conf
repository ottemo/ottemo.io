	##
	# Basic Settings
	##

	tcp_nodelay on;
	types_hash_max_size 2048;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	# Hide nginx version information.
	server_tokens off;

	# Define the MIME types for files.
	include mime.types;
	default_type application/octet-stream;

	# Update charset_types due to updated mime.types
	charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

	# Format to use in log files
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
	    '$status $body_bytes_sent "$http_referer" '
	    '"$http_user_agent" "$http_x_forwarded_for"';

	# Default log file
	# (this is only used when you don't override access_log on a server{} level)
	access_log /var/log/nginx/access.log main;

	# How long to allow each connection to stay idle; longer values are better
	# for each individual client, particularly for SSL, but means that worker
	# connections are tied up longer. (Default: 65)
	keepalive_timeout 45;
    keepalive_requests 100000;
    reset_timedout_connection on;


	# Speed up file transfers by using sendfile() to copy directly
	# between descriptors rather than using read()/write().
###	sendfile on;

	# Send the client a "request timed out" if the body is not loaded by this time.
	client_body_timeout 10;

	# If the client stops reading data, free up the stale client connection after this much time.
	send_timeout 2;

	# Tell Nginx not to send out partial frames; this increases throughput
	# since TCP frames are filled up before being sent out. (adds TCP_CORK)
	tcp_nopush on;

	# Compression
	# Enable Gzip compressed.
	gzip on;

	# Compression level (1-9).
	# 5 is a perfect compromise between size and cpu usage, offering about
	# 75% reduction for most ascii files (almost identical to level 9).
	gzip_comp_level 5;

	# Don't compress anything that's already small and unlikely to shrink much
	# if at all (the default is 20 bytes, which is bad as that usually leads to
	# larger files after gzipping).
	gzip_min_length 256;

	# Compress data even for clients that are connecting to us via proxies,
	# identified by the "Via" header (required for CloudFront).
	gzip_proxied any;

	# Tell proxies to cache both the gzipped and regular version of a resource
	# whenever the client's Accept-Encoding capabilities header varies;
	# Avoids the issue where a non-gzip capable client (which is extremely rare
	# today) would display gibberish if their proxy gave them the gzipped version.
	gzip_vary on;

	gzip_buffers 16 8k;
	gzip_http_version 1.1;

	# Compress all output labeled with one of the following MIME-types.
	gzip_types
	application/atom+xml
	application/javascript
	application/json
	application/ld+json
	application/manifest+json
	application/rdf+xml
	application/rss+xml
	application/schema+json
	application/vnd.geo+json
	application/vnd.ms-fontobject
	application/x-font-ttf
	application/x-javascript
	application/x-web-app-manifest+json
	application/xhtml+xml
	application/xml
	font/eot
	font/opentype
	image/bmp
	image/svg+xml
	image/vnd.microsoft.icon
	image/x-icon
	text/cache-manifest
	text/css
	text/javascript
	text/plain
	text/vcard
	text/vnd.rim.location.xloc
	text/vtt
	text/x-component
	text/x-cross-domain-policy
	text/xml;

	# text/html is always compressed by HttpGzipModule
	# This should be turned on if you are going to have pre-compressed copies (.gz) of
	# static files available. If not it should be left off as it will cause extra I/O
	# for the check. It is best if you enable this in a location{} block for
	# a specific directory, or on an individual server{} level.
	# gzip_static on;



